package file;

import lombok.extern.slf4j.Slf4j;

import org.apache.commons.logging.Log;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/compare")
public class FileController {

	
			
	
	
    @PostMapping
    public ResponseEntity<Map<String, Object>> compareFiles(
            @RequestParam("fileA") MultipartFile fileA,
            @RequestParam("fileB") MultipartFile fileB) {

        Map<String, Object> response = new HashMap<>();

        try {
            // 업로드된 파일을 임시 디렉토리에 저장
            String tempDir = System.getProperty("java.io.tmpdir");
            File savedFileA = new File(tempDir, fileA.getOriginalFilename());
            File savedFileB = new File(tempDir, fileB.getOriginalFilename());
            fileA.transferTo(savedFileA);
            fileB.transferTo(savedFileB);
            
            System.out.printf("File A saved at: {}", savedFileA.getAbsolutePath());
            System.out.printf("File B saved at: {}", savedFileB.getAbsolutePath());

            // Python 비교 로직 호출 (예: Python 스크립트를 ProcessBuilder로 실행)
            // 아래는 Python 결과를 가정한 예제입니다.
            response.put("status", "success");
            response.put("message", "파일 비교가 완료되었습니다.");
            response.put("result", "비교 결과 내용 (예시)");

            return ResponseEntity.ok(response);
        } catch (IOException e) {
        	System.out.printf("파일 업로드 또는 비교 중 오류 발생", e);
            response.put("status", "error");
            response.put("message", "파일 업로드 중 오류가 발생했습니다.");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
        
        ProcessBuilder processBuilder = new ProcessBuilder(
        	    "python", "compare_script.py", savedFileA.getAbsolutePath(), savedFileB.getAbsolutePath()
        	);

        	processBuilder.redirectErrorStream(true);
        	Process process = processBuilder.start();
        	BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        	StringBuilder resultBuilder = new StringBuilder();
        	String line;

        	while ((line = reader.readLine()) != null) {
        	    resultBuilder.append(line);
        	}

        	int exitCode = process.waitFor();
        	if (exitCode == 0) {
        	    response.put("comparison_result", resultBuilder.toString());
        	} else {
        	    response.put("status", "error");
        	    response.put("message", "Python script execution failed.");
        	}

        
    }
    
    
    
}