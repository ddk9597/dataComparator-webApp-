package file;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.util.HashMap;
import java.util.Map;

@RestController
@Slf4j
@RequestMapping("/compare")
public class FileUploadController {

    @PostMapping
    public ResponseEntity<Map<String, Object>> compareFiles(
            @RequestParam("fileA") MultipartFile fileA,
            @RequestParam("fileB") MultipartFile fileB) {

        Map<String, Object> response = new HashMap<>();

        try {
            // 업로드된 파일을 임시 디렉토리에 저장
            String tempDir = System.getProperty("java.io.tmpdir");
            File savedFileA = new File(tempDir, fileA.getOriginalFilename());
            File savedFileB = new File(tempDir, fileB.getOriginalFilename());
            fileA.transferTo(savedFileA);
            fileB.transferTo(savedFileB);

            System.out.printf("File A saved at: {}", savedFileA.getAbsolutePath());
            System.out.printf("File B saved at: {}", savedFileB.getAbsolutePath());

            // Python 스크립트 경로 설정
            String pythonScriptPath = new File("src/main/resources/scripts/compare_script.py").getAbsolutePath();

            // Python 스크립트 실행
            ProcessBuilder processBuilder = new ProcessBuilder(
                    "python", pythonScriptPath, savedFileA.getAbsolutePath(), savedFileB.getAbsolutePath()
            );
            processBuilder.redirectErrorStream(true);
            Process process = processBuilder.start();

            // Python 스크립트 출력 읽기
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder resultBuilder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                resultBuilder.append(line);
            }

            int exitCode = process.waitFor();
            if (exitCode == 0) {
                response.put("status", "success");
                response.put("comparison_result", resultBuilder.toString());
            } else {
                response.put("status", "error");
                response.put("message", "Python script execution failed.");
            }

            return ResponseEntity.ok(response);

        } catch (Exception e) {
        	
        	System.out.printf("파일 처리 중 오류 발생", e);
            response.put("status", "error");
            response.put("message", "파일 처리 중 오류가 발생했습니다.");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }
}
